QUERIES:

1) SELECT ALL VEHICLE NAME WHERE VEHICLE TYPE IS BIKE
SELECT V_NAME
FROM VEHICLE
WHERE V_TYPE=’BIKE’;
2) LIST ALL CUSTOMERS NAME WHERE ORDER VEHICLE ON DATE 16-JAN- 2016
SELECT C.CU_NAME
FROM CUSTOMER C, SALES S
WHERE S.C_ID=C.C_ID AND ORD_DATE=’16-JAN- 2016’;

3) LIST VEHICLE_NAEM WHICH HAS HIGH COST AMONG ALL VEHICLES;
SELECT V_NAME,MAX(V_COST)
FROM VEHICLE
GROUP BY CAR;
4) SELECT TAX DEATAILS OF VEHICLE WHERE VEHICLE ID IS 11
SELECT T.TAX_DESC, V.V_NAME
FROM TAX T, DEALER D, SALES S, VEHICLE V
WHERE S.V_ID=V.V_ID AND S.TAX_ID=T.TAX_ID AND V.V_ID=11;
5) LIST ALL SHOWROOM NAME THAT ARE COMES UNDER DEALER ID=104
SELECT V.V_NAME,T.T_DESC FROM
FROM VEHICLE V,TAX T
WHERE S.D_ID=D.D_ID AND D.D_ID=104;



TRIGGERS:

1.WRITE A INSERTION TRIGGER TO CHECK DATE OF ORDER MUST BE LESS THAN
CURRENT DATE.
CREATE OR REPLACE TRIGGER TR
BEFORE INSERT ON SALES
FOR EACH ROW
DECLARE
VAR DATE;
BEGIN
SELECT SYSDATE INTO VAR FROM SALES;
IF(VAR&lt;:NEW.ORD_DAT)THEN
RAISE_APPLICATION_ERROR(-20009,’INCORECT DATE’);
END IF;
/

2.Write a trigger to car should greater than 100000 and bike cost should be less than
100000

CREATE OR REPLACE TRIGGER V1
BEFORE INSERT ON VEHICLE FOR EACH ROW
DECLARE
BEGIN
IF(:NEW.V_COST &gt;100000 AND :NEW.V_TYPE=’BIKE’ OR :NEW.V_COST&lt;100000 AND
:NEW.V_TYPE=’CAR’) THEN
RAISE_APPLICATION_ERROR(-20009,’CAR COST SHOULD &gt;100000 AND BIKE COST
SHOULD &lt;100000’);
END IF;
END;
/


PROCEDURES:

1. WRITE A PROCEDURE TO LIST ALL VEHICLE NAMES CREATED DURING
SPECIFIC YEAR

CREATE OR REPLACE PROCEDURE PR(YEAR INTEGER)
IS
CURSOR V3 IS
SELECT V.V_NAME FROM VEHICLE V WHERE V.CREATE_DATE=YEAR;
V1 VEHICLE.V_NAME%TYPE;
BEGIN
OPEN V3;
FETCH V3 INTO V1;
LOOP
EXIT WHEN V3% NOT FOUND;
DBMS_OUTPUT_PUT_LINE(&#39;V_VNAME&#39;||V1);
FETCH V3 INTO V1;
END LOOP;
CLOSE V3;
END;
/


2.WRITE A PROCEDURE TO LIST ALL VEHICLE AND SALES DETAILS
PURCHAGED ON THE SPECIFIC DATE

CREATE OR REPLACE PROCEDURE PR1(ORD_DATE DATE)
IS
CURSOR V5 IS
SELECT S.SAL_ID,S.V_ID,S.CU_ID,V.V_NAME FROM SALES S,VEHICLE V WHERE V.V_ID=S.V_ID
S.ORD_DAT=ORD_DATE;
S1 SALES S.SAL_ID%TYPE;
S2 SALES S.V_ID%TYPE;
S3 SALES S.CU_ID%TYPE;
S4 VEHICLE.V_NAME%TYPE;
BEGIN
OPEN S5;
FETCH S5 INTO S1,S2,S3,S4;
LOOP
EXIT WHEN S5% NOT FOUND;
DBMS_OUTPUT.PUT_LINE(‘VEHICLE NAME’|| S4 ||’V_ID’ || S2 ||’C_ID’ || S3 ||’SAL_ID’ || S1);
FETCH S5 INTO S1,S2,S3,S4;
END LOOP;
CLOSE S5;
END;
/


